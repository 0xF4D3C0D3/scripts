#!/usr/bin/env python

import argparse
import functools
import re
import sys

parser = argparse.ArgumentParser(description='find regex pattern from stdin and print captured groups with template')
parser.add_argument('pattern', help="pattern. ex) '(\w+):(\d+)' or '(?P<app>\w+?)app)'")
parser.add_argument('template', nargs='?', help="output template. ex) '{0}:{1}' or '{key}={value}'. default is {0} {1} {2}...")
parser.add_argument('-s', '--sub', action='store_true', help='instead of only printing captured groups, substitutes pattern with templaeg')
parser.add_argument('-f', '--flags', default='', type=str, help='flags for regex. ex) -fMS <- MULTILINE | DOTALL')
parser.add_argument('-d', '--delim', default='\n', nargs='?', type=str, help='line delimiter. default is \\n')
parser.add_argument('-r', '--raw', action='store_true', help='escape <pattern> to use it as raw string')

args = parser.parse_args()

if __name__ == '__main__':
    flags = functools.reduce(lambda x, y: x|y, [getattr(re, _) for _ in set('AILMSXU') & set(args.flags)], 0)
    delim = args.delim or ''

    if args.raw:
        pattern = '\n'.join(map(re.escape, args.pattern.splitlines()))

        if sys.stdin.isatty():
            print(pattern)
            exit()
    else:
        pattern = args.pattern

    if args.sub:
        template = args.template or ''
        template = re.sub('{(\d+)}', lambda _: fr'\{int(_.group(1))+1}', template)
        template = re.sub('{(\w+)}', r'\\g<\1>', template)

        print(re.sub(pattern, template, sys.stdin.read()), end='')
    else:
        if args.template:
            for match in re.finditer(pattern, sys.stdin.read(), flags):
                print(args.template.format(*(_ or '' for _ in match.groups()), **match.groupdict()), end=delim)
        else:
            for match in re.finditer(pattern, sys.stdin.read(), flags):
                print(' '.join((_ or '' for _ in match.groups())), end=delim)
